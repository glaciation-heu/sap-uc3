---
apiVersion: v1
kind: ConfigMap
metadata:
  name: party-config
  annotations:
    # helm deletes the object is present due to above "if not" condition
    # add annotation to keep the object
    # helm.sh/resource-policy: keep
data:
  config-p1.json: |
    {
        "retrySleep": "50ms",
        "networkEstablishTimeout": "1m",
        "prime": "198766463529478683931867765928436695041",
        "rInv": "141515903391459779531506841503331516415",
        "gfpMacKey": "-88222337191559387830816715872691188861",
        "gf2nMacKey": "0xb660b323e6",
        "gf2nBitLength": 40,
        "gf2nStorageSize": 8,
        "prepFolder": "Player-Data",
        "amphoraConfig": {
            "host": "csmock.default.svc.cluster.local",
            "scheme": "http",
            "path": "/1/amphora/"
        },
        "castorConfig": {
            "host": "csmock.default.svc.cluster.local",
            "scheme": "http",
            "path": "/1/castor/",
            "tupleStock": 1000
        },
        "frontendURL": "csmock.default.svc.cluster.local",
        "discoveryConfig": {
            "host": "csmock.default.svc.cluster.local",
            "port": "80",
            "connectTimeout": "60s"
        },
        "playerID": 1,
        "playerCount": 2,
        "stateTimeout": "60s",
        "computationTimeout": "600s"
    }
  config-p2.json: |
    {
        "retrySleep": "50ms",
        "networkEstablishTimeout": "1m",
        "prime": "198766463529478683931867765928436695041",
        "rInv": "141515903391459779531506841503331516415",
        "gfpMacKey": "1113507028231509545156335486838233835",
        "gf2nMacKey": "0x4ec9a0343c",
        "gf2nBitLength": 40,
        "gf2nStorageSize": 8,
        "prepFolder": "Player-Data",
        "amphoraConfig": {
            "host": "csmock",
            "scheme": "http",
            "path": "/2/amphora/"
        },
        "castorConfig": {
            "host": "csmock",
            "scheme": "http",
            "path": "/2/castor/",
            "tupleStock": 1000
        },
        "frontendURL": "csmock",
        "discoveryConfig": {
            "host": "csmock",
            "port": "80",
            "connectTimeout": "60s"
        },
        "playerID": 1,
        "playerCount": 2,
        "stateTimeout": "60s",
        "computationTimeout": "600s"
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: csmock
spec:
  replicas: 1
  selector:
    matchLabels:
      app: csmock
  template:
    metadata:
      labels:
        app: csmock
    spec:
      containers:
        - name: csmock
          image: cs_mock:latest
          imagePullPolicy: Never
          ports:
            - name: http1
              containerPort: 80
---
kind: Service
apiVersion: v1
metadata:
  name: csmock
spec:
  selector:
    app: csmock
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client
  template:
    metadata:
      labels:
        app: client
    spec:
      containers:
        - name: client
          image: ghcr.io/glaciation-heu/sap-uc3/client_service:0.1.2
          ports:
            - name: http1
              containerPort: 80
---
kind: Service
apiVersion: v1
metadata:
  name: client
spec:
  selector:
    app: client
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: party1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: party1
  template:
    metadata:
      labels:
        app: party1
    spec:
      containers:
        - name: party1
          image: ephemeral:latest
          imagePullPolicy: Never
          volumeMounts:
            - name: config
              mountPath: "/etc/config/config.json"
              readOnly: true
              subPath: config-p1.json
          ports:
            - name: http1
              containerPort: 8080
            - name: tcp
              containerPort: 5000
          ports:
            - name: http1
              containerPort: 8080
            - name: tcp
              containerPort: 5000
      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: party-config
---
kind: Service
apiVersion: v1
metadata:
  name: party1
spec:
  selector:
    app: party1
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: http1
    - protocol: TCP
      port: 5000
      targetPort: 5000
      name: tcp
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: party2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: party2
  template:
    metadata:
      labels:
        app: party2
    spec:
      containers:
        - name: party2
          image: ephemeral:latest
          imagePullPolicy: Never
          volumeMounts:
            - name: config
              mountPath: "/etc/config/config.json"
              readOnly: true
              subPath: config-p2.json
          ports:
            - name: http1
              containerPort: 8080
            - name: tcp
              containerPort: 5000
      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: party-config
---
kind: Service
apiVersion: v1
metadata:
  name: party2
spec:
  selector:
    app: party2
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: http1
    - protocol: TCP
      port: 5000
      targetPort: 5000
      name: tcp
